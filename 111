import java.util.*

data class TreeNode(
    var key: Int,
    var left: TreeNode? = null,
    var right: TreeNode? = null
)

class Solution {
    
    fun minDepth(root: TreeNode?): Int {
        
        if(root == null)
        	return 0
        
        val queue: Queue<Pair<TreeNode?, Int>> = LinkedList()
        
        queue.offer(Pair(root, 1))
        
        while(queue.isNotEmpty()){
            
            val (node, depth) = queue.poll()
            
            if(node!!.left == null && node!!.right == null)
                return depth
            
            if(node.left != null)
            	queue.offer(Pair(node.left, depth+1)) 
            if(node.right != null)
            	queue.offer(Pair(node.right, depth+1)) 
            
        }
        
        return 0
        
    }
    

}
